Sold = c(0, 12, 5),
Expected = c(2, 10, 3))
chisq_test <- chisq.test(x = df1$sold, y = df1$poll)
chisq_test
chisq_test <- chisq.test(x = df1$sold, y = df1$poll)
chisq_test
all(pizza_sales$Expected >= 5)
expec_prop <- pizza_sales$Expected/sum(pizza_sales$Expected)
chisq_test2 <- chisq.test(x = pizza_sales$Sold, y = expec_prop,
simulate.p.value = TRUE,
B = 5000)
chisq_test2
expec_prop <- pizza_sales$Expected/sum(pizza_sales$Expected)
chisq_test2 <- chisq.test(x = pizza_sales$Sold, y = expec_prop,
simulate.p.value = TRUE,
B = 4000)
chisq_test2
expec_prop <- pizza_sales$Expected/sum(pizza_sales$Expected)
chisq_test2 <- chisq.test(x = pizza_sales$Sold, y = expec_prop,
simulate.p.value = TRUE,
B = 5000)
chisq_test2
q()
q()
data <- read.csv("5240-ra3-memory.csv")
data
table(data)
data.frame(data)
aggregate(data, score_change ~ treatment_group, mean)
mean <- aggregate(data, score_change ~ treatment_group, mean)
mean
aggregate(data, score_change ~ treatment_group, FUN = mean)
sd <- aggregate(data, score_change ~ treatment_group, sd)
mean1 <- aggregate(data, score_change ~ treatment_group, mean)
sd1 <- aggregate(data, score_change ~ treatment_group, sd)
mean1
sd1
gingko_scores <- subset(x = data,
subset = treatment_group == "Gingko")
placebo_scores <- subset(x = data,
subset = treatment_group == "Placebo")
placebo_scores
gingko_scores
gingko_scores <- subset(x = data,
subset = treatment_group == "Gingko")
placebo_scores <- subset(x = data,
subset = treatment_group == "Placebo")
par(mar = c(4,4,1.5,1), mgp = c(2.5, 1, 0), mfrow = c(2,3)
, oma = c(0, 2, 0, 0))
qqnorm(gingko_scores)
par(mar = c(4,4,1.5,1), mgp = c(2.5, 1, 0), mfrow = c(2,3)
, oma = c(0, 2, 0, 0))
qqnorm(gingko_scores$score_change)
qqline(gingko_scores$score_change)
hist(gingko_scores$score_change,
main = "Histogram of Gingko Scores")
boxplot(gingko_scores$score_change, ylab = "Score")
qqnorm(placebo_scores$score_change)
qqline(placebo_scores$score_change)
hist(placebo_scores$score_change,
main = "Histogram of Placebo Score")
boxplot(placebo_scores$score_change, ylab = "Score")
mtext(text = "Gingko Treatment Group", side = 2, line = 0.4,
outer = TRUE, adj = 0.9)
mtext(text = "Placebo Group", side = 2, line = 0.4,
outer = TRUE, adj = 0.15)
q()
data <- read.csv("5240-ra3-memory.csv")
mean1 <- aggregate(data, score_change ~ treatment_group, mean)
sd1 <- aggregate(data, score_change ~ treatment_group, sd)
mean1
sd1
gingko_scores <- subset(x = data,
subset = treatment_group == "Gingko")
placebo_scores <- subset(x = data,
subset = treatment_group == "Placebo")
par(mar = c(4,4,1.5,1), mgp = c(2.5, 1, 0), mfrow = c(2,3)
, oma = c(0, 2, 0, 0))
qqnorm(gingko_scores$score_change)
qqline(gingko_scores$score_change)
hist(gingko_scores$score_change,
main = "Histogram of Gingko Scores")
boxplot(gingko_scores$score_change, ylab = "Score")
qqnorm(placebo_scores$score_change)
qqline(placebo_scores$score_change)
hist(placebo_scores$score_change,
main = "Histogram of Placebo Score")
boxplot(placebo_scores$score_change, ylab = "Score")
mtext(text = "Gingko Treatment Group", side = 2, line = 0.4,
outer = TRUE, adj = 0.9)
mtext(text = "Placebo Group", side = 2, line = 0.4,
outer = TRUE, adj = 0.15)
par(mar = c(4,4,1.5,1), mgp = c(2.5, 1, 0), mfrow = c(2,3)
, oma = c(0, 2, 0, 0))
qqnorm(gingko_scores$score_change)
qqline(gingko_scores$score_change)
hist(gingko_scores$score_change,
main = "Histogram of Gingko Scores")
boxplot(gingko_scores$score_change, ylab = "Score")
qqnorm(placebo_scores$score_change)
qqline(placebo_scores$score_change)
hist(placebo_scores$score_change,
main = "Histogram of Placebo Score")
boxplot(placebo_scores$score_change, ylab = "Score")
mtext(text = "Gingko Treatment Group", side = 2, line = 0.4,
outer = TRUE, adj = 0.9)
mtext(text = "Placebo Group", side = 2, line = 0.4,
outer = TRUE, adj = 0.15)
t_stat <- t.test(gingko_scores, placebo_scores,
alternative = "two.sided")
gingko_scores
t_stat <- t.test(gingko_scores$score_change,
placebo_scores$score_change,
alternative = "two.sided")
t_stat
t_stat <- t.test(gingko_scores$score_change,
placebo_scores$score_change,
alternative = "greater")
t_stat
q()
q()
#Creating a Scatterplot
library(ggplot2)
ggplot(data, aes(x = X2019.Score , y = GDP.Growth.Rate....)) +
geom_point(color = "red") +
theme_minimal() +
ggtitle("Economic Freedom vs GDP Growth") +
xlab("Economic Freedom Score (2019)") +
ylab("GDP Growth Rate (%)")
data <- read.csv("economic_freedom_index2019_data.csv")
#Creating a Scatterplot
library(ggplot2)
ggplot(data, aes(x = X2019.Score , y = GDP.Growth.Rate....)) +
geom_point(color = "red") +
theme_minimal() +
ggtitle("Economic Freedom vs GDP Growth") +
xlab("Economic Freedom Score (2019)") +
ylab("GDP Growth Rate (%)")
p <- ggplot(data, aes(x = X2019.Score, y = GDP.Growth.Rate....)) +
geom_violin(trim = FALSE, fill = "skyblue", color = "blue") +
theme_minimal()
p <- p + geom_jitter(aes(color = Score_2019), width = 0.15, size = 2,
alpha = 0.6) +
theme(legend.position = "none")
p <- p + labs(title = "GDP Growth Rate by 2019 Score",
x = "2019 Score",
y = "GDP Growth Rate") +
theme(plot.title = element_text(hjust = 0.5)) # Center the plot title
# Display the plot
print(p)
p <- ggplot(data, aes(x = X2019.Score, y = GDP.Growth.Rate....)) +
geom_violin(trim = FALSE, fill = "skyblue", color = "blue") +
theme_minimal()
p <- p + geom_jitter(aes(color = X2019.Score), width = 0.15,
size = 2,
alpha = 0.6) +
theme(legend.position = "none")
p <- p + labs(title = "GDP Growth Rate by 2019 Score",
x = "2019 Score",
y = "GDP Growth Rate") +
theme(plot.title = element_text(hjust = 0.5)) # Center the plot title
# Display the plot
print(p)
p <- ggplot(data, aes(x = X2019.Score, y = GDP.Growth.Rate....)) +
geom_violin(trim = FALSE, fill = "skyblue", color = "darkblue") +
theme_minimal()
p <- p + geom_jitter(aes(color = X2019.Score), width = 0.15,
size = 2,
alpha = 0.6) +
theme(legend.position = "none")
p <- p + labs(title = "GDP Growth Rate by 2019 Score",
x = "2019 Score",
y = "GDP Growth Rate") +
theme(plot.title = element_text(hjust = 0.5)) # Center the plot title
# Display the plot
print(p)
p <- ggplot(data, aes(x = X2019.Score, y = GDP.Growth.Rate....)) +
geom_violin(trim = FALSE, fill = "skyblue", color = "darkblue") +
theme_minimal()
p <- p + geom_jitter(aes(color = X2019.Score), width = 0.15,
size = 2,
alpha = 0.6) +
theme(legend.position = "none")
p <- p + labs(title = "GDP Growth Rate by 2019 Score",
x = "2019 Score",
y = "GDP Growth Rate") +
theme(plot.title = element_text(hjust = 0.5)) # Center the plot title
# Display the plot
print(p)
p <- ggplot(data, aes(x = X2019.Score, y = GDP.Growth.Rate....)) +
geom_violin(trim = FALSE, fill = "skyblue", color = "darkblue") +
theme_minimal()
p <- p + geom_jitter(aes(color = X2019.Score), width = 0.15,
size = 2,
alpha = 0.6) +
theme(legend.position = "none")
p <- p + labs(title = "GDP Growth Rate by 2019 Score",
x = "2019 Score",
y = "GDP Growth Rate") +
theme(plot.title = element_text(hjust = 0.5)) # Center the plot title
# Display the plot
print(p)
p <- ggplot(data, aes(x = X2019.Score, y = GDP.Growth.Rate....)) +
geom_violin(trim = FALSE, fill = "skyblue", color = "darkblue") +
theme_minimal()
p <- p + geom_jitter(aes(color = X2019.Score), width = 0.15,
size = 2,
alpha = 0.6) +
theme(legend.position = "none")
p <- p + labs(title = "GDP Growth Rate by 2019 Score",
x = "Economic Freedom Score (2019)",
y = "GDP Growth Rate") +
theme(plot.title = element_text(hjust = 0.5))
# Display the plot
print(p)
p <- ggplot(data, aes(x = X2019.Score, y = GDP.Growth.Rate....)) +
geom_violin(trim = FALSE, fill = "green", color = "red") +
theme_minimal()
p <- p + geom_jitter(aes(color = X2019.Score), width = 0.15,
size = 2,
alpha = 0.6) +
theme(legend.position = "none")
p <- p + labs(title = "GDP Growth Rate by 2019 Score",
x = "Economic Freedom Score (2019)",
y = "GDP Growth Rate") +
theme(plot.title = element_text(hjust = 0.5))
# Display the plot
print(p)
p <- ggplot(data, aes(x = X2019.Score, y = GDP.Growth.Rate....
, fill = X2019.Scor)) +
geom_violin(trim = FALSE) +
geom_jitter(aes(color = X2019.Scor), width = 0.15, size = 2, alpha = 0.6) +
scale_fill_brewer(palette = "Spectral") + #Use a color palette for fill
scale_color_brewer(palette = "Spectral") + #Use a color palette for scatter points
theme_minimal() +
labs(title = "GDP Growth Rate by 2019 Score",
x = "2019 Score", y = "GDP Growth Rate") +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none")
print(p)
p <- ggplot(data, aes(x = X2019.Score, y = GDP.Growth.Rate....
, fill = X2019.Scor)) +
geom_violin(trim = FALSE) +
geom_jitter(aes(color = X2019.Score), width = 0.15, size = 2, alpha = 0.6) +
scale_fill_brewer(palette = "Spectral") + #Use a color palette for fill
scale_color_brewer(palette = "Spectral") + #Use a color palette for scatter points
theme_minimal() +
labs(title = "GDP Growth Rate by 2019 Score",
x = "2019 Score", y = "GDP Growth Rate") +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none")
print(p)
p <- ggplot(data, aes(x = X2019.Score, y = GDP.Growth.Rate....
, fill = X2019.Score)) +
geom_violin(trim = FALSE) +
geom_jitter(aes(color = X2019.Score), width = 0.15,
size = 2, alpha = 0.6) +
scale_fill_brewer(palette = "Spectral") + #Use a color palette for fill
scale_color_brewer(palette = "Spectral") + #Use a color palette for scatter points
theme_minimal() +
labs(title = "GDP Growth Rate by 2019 Score",
x = "2019 Score", y = "GDP Growth Rate") +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none")
print(p)
p <- ggplot(data, aes(x = factor(X2019.Score),
y = GDP.Growth.Rate....,
fill = factor(X2019.Score))) +
geom_violin(trim = FALSE) +
geom_jitter(aes(color = factor(X2019.Score)),
width = 0.15, size = 2, alpha = 0.6) +
scale_fill_brewer(palette = "Spectral") + # Use a color palette for fill
scale_color_brewer(palette = "Spectral") + # Use a color palette for scatter points
theme_minimal() +
labs(title = "GDP Growth Rate by 2019 Score",
x = "2019 Score", y = "GDP Growth Rate") +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none")
print(p)
p <- ggplot(data, aes(x = X2019.Score, y = GDP.Growth.Rate....)) +
geom_violin(trim = FALSE, fill = "skyblue", color = "darkblue") +
theme_minimal()
p <- p + geom_jitter(aes(color = X2019.Score), width = 0.15,
size = 2,
alpha = 0.6) +
theme(legend.position = "none")
p <- p + labs(title = "GDP Growth Rate by 2019 Score",
x = "Economic Freedom Score (2019)",
y = "GDP Growth Rate") +
theme(plot.title = element_text(hjust = 0.5))
# Display the plot
print(p)
p <- ggplot(data, aes(x = X2019.Score, y = GDP.Growth.Rate....)) +
geom_violin(trim = FALSE, fill = "skyblue", color = "darkblue") +
theme_minimal()
p <- p + geom_jitter(aes(color = X2019.Score), width = 0.15,
size = 2,
alpha = 0.6) +
theme(legend.position = "none")
p <- p + labs(title = "GDP Growth Rate by 2019 Score",
x = "Economic Freedom Score (2019)",
y = "GDP Growth Rate") +
theme(plot.title = element_text(hjust = 0.5))
# Display the plot
print(p)
#Creating a Violin with Scatterplot overlay
p <- ggplot(data, aes(x = X2019.Score, y = GDP.Growth.Rate....)) +
geom_violin(trim = FALSE, fill = "skyblue", color = "darkblue") +
theme_minimal()
p <- p + geom_jitter(aes(color = X2019.Score), width = 0.15,
size = 2,
alpha = 0.6) +
theme(legend.position = "none")
p <- p + labs(title = "GDP Growth Rate by 2019 Score",
x = "Economic Freedom Score (2019)",
y = "GDP Growth Rate") +
theme(plot.title = element_text(hjust = 0.5))
# Display the plot
print(p)
#ggplot object with data and aesthetic mappings
library(ggplot2)
p <- ggplot(data, aes(x = X2019.Score,
y = GDP.Growth.Rate....)) +
#violin plot for the distribution of GDP Growth
geom_violin(trim = FALSE, fill = "skyblue",
color = "darkblue") +
theme_minimal() #minimal theme for a clean look
#overlay scatterplot for individual data points with jitter to avoid overlap.
p <- p + geom_jitter(aes(color = X2019.Score),
width = 0.15,
size = 2,
alpha = 0.6) +
#Remove legend for scatterplot points
theme(legend.position = "none")
#Adding labels and title
p <- p + labs(title = "GDP Growth Rate by 2019 Score",
x = "Economic Freedom Score (2019)",
y = "GDP Growth Rate") +
# Center the title
theme(plot.title = element_text(hjust = 0.5))
# Display the plot
print(p)
library(ggplot2)
predictions <- predict(multi_reg)
library(lmtest)
library(car)
# Calculating the multiple regression using the lm() function
multi_reg <- lm(GDP.Growth.Rate.... ~ X2019.Score +
Investment.Freedom + Labor.Freedom + Trade.Freedom,
data = data)
# Using summary() function to get a summary of the model output
summary(multi_reg)
library(lmtest)
library(car)
# Calculating the multiple regression using the lm() function
multi_reg <- lm(GDP.Growth.Rate.... ~ X2019.Score +
Investment.Freedom + Labor.Freedom + Trade.Freedom,
data = data)
# Using summary() function to get a summary of the model output
summary(multi_reg)
library(ggplot2)
predictions <- predict(multi_reg)
actuals <- multi_reg$model[[1]] # Replace with the actual dependent variable name
ggplot(data.frame(Actual = actuals, Predicted = predictions), aes(x = Actual, y = Predicted)) +
geom_point(col="darkblue") +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
theme_minimal() +
xlab("Actual Values") + ylab("Predicted Values") +
ggtitle("Predicted vs Actual Values")
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
predictions <- predict(multi_reg)
actuals <- multi_reg$model[[1]] # Replace with the actual dependent variable name
ggplot(data.frame(Actual = actuals, Predicted = predictions), aes(x = Actual, y = Predicted)) +
geom_point(col="darkblue") +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
theme_minimal() +
xlab("Actual Values") + ylab("Predicted Values") +
ggtitle("Predicted vs Actual Values")
q()
q()
df1 <- data.frame(sold = c(24, 65, 12, 30, 39),
poll = c(0.15, 0.40, 0.06, 0.15, 0.24))
total_sold <- sum(df1$sold)
df1$expected <- total_sold * df1$poll
all(df1$expected >= 5)
chisq_test <- chisq.test(x = df1$sold, y = df1$poll)
chisq_test
pizza_sales <- data.frame(
Flavor = c("Cotton Candy", "BBQ Chicken", "Taco"),
Sold = c(0, 12, 5),
Expected = c(2, 10, 3))
all(pizza_sales$Expected >= 5)
expec_prop <- pizza_sales$Expected/sum(pizza_sales$Expected)
chisq_test2 <- chisq.test(x = pizza_sales$Sold, p = expec_prop,
simulate.p.value = TRUE,
B = 5000)
chisq_test2
expec_prop <- pizza_sales$Expected/sum(pizza_sales$Expected)
chisq_test2 <- chisq.test(x = pizza_sales$Sold, p = expec_prop,
simulate.p.value = TRUE,
B = 5000)
chisq_test2
q()
q()
df1 <- data.frame(sold = c(24, 65, 12, 30, 39),
poll = c(0.15, 0.40, 0.06, 0.15, 0.24))
total_sold <- sum(df1$sold)
df1$expected <- total_sold * df1$poll
all(df1$expected >= 5)
chisq_test <- chisq.test(x = df1$sold, p = df1$poll)
chisq_test
df1$expected
q()
q()
data <- read.csv("5240-ra3-memory.csv")
mean1 <- aggregate(data, score_change ~ treatment_group, mean)
sd1 <- aggregate(data, score_change ~ treatment_group, sd)
mean1
sd1
?aggregate
gingko_scores <- subset(x = data,
subset = treatment_group == "Gingko")
placebo_scores <- subset(x = data,
subset = treatment_group == "Placebo")
gingko_scores
placebo_scores
par(mar = c(4,4,1.5,1), mgp = c(2.5, 1, 0), mfrow = c(2,3)
, oma = c(0, 2, 0, 0))
qqnorm(gingko_scores$score_change)
qqline(gingko_scores$score_change)
hist(gingko_scores$score_change,
main = "Histogram of Gingko")
boxplot(gingko_scores$score_change, ylab = "Score")
qqnorm(placebo_scores$score_change)
qqline(placebo_scores$score_change)
hist(placebo_scores$score_change,
main = "Histogram of Placebo")
boxplot(placebo_scores$score_change, ylab = "Score")
mtext(text = "Gingko Treatment Group", side = 2, line = 0.4,
outer = TRUE, adj = 0.9)
mtext(text = "Placebo Group", side = 2, line = 0.4,
outer = TRUE, adj = 0.15)
t_stat <- t.test(gingko_scores$score_change,
placebo_scores$score_change,
alternative = "greater")
t_stat
q()
q()
q()
pizza_sales <- data.frame(
Flavor = c("Cotton Candy", "BBQ Chicken", "Taco"),
Sold = c(0, 12, 5),
Expected = c(2, 10, 3))
all(pizza_sales$Expected >= 5)
expec_prop <- pizza_sales$Expected/sum(pizza_sales$Expected)
chisq_test2 <- chisq.test(x = pizza_sales$Sold, p = expec_prop,
simulate.p.value = TRUE,
B = 5000)
chisq_test2
set.seed(1234)
chisq.test(x = pizza_sales$Sold, y = pizza_sales$Expected,
simulate.p.value = TRUE, B = 5000)
q()
shiny::runApp('C:/HAMZA/Trent Academics/Data Analytics with R/Term Project/ExchangeRate')
install.packages("shinythemes")
library(shinythemes)
runApp('C:/HAMZA/Trent Academics/Data Analytics with R/Term Project/ExchangeRate')
runApp('C:/HAMZA/Trent Academics/Data Analytics with R/Term Project/ExchangeRate')
runApp('C:/HAMZA/Trent Academics/Data Analytics with R/Term Project/ExchangeRate')
runApp('C:/HAMZA/Trent Academics/Data Analytics with R/Term Project/ExchangeRate')
runApp('C:/HAMZA/Trent Academics/Data Analytics with R/Term Project/ExchangeRate')
runApp('C:/HAMZA/Trent Academics/Data Analytics with R/Term Project/ExchangeRate')
runApp('C:/HAMZA/Trent Academics/Data Analytics with R/Term Project/ExchangeRate')
install.packages("corrplot")
library(corrplot)
runApp('C:/HAMZA/Trent Academics/Data Analytics with R/Term Project/ExchangeRate')
runApp('C:/HAMZA/Trent Academics/Data Analytics with R/Term Project/ExchangeRate')
runApp('C:/HAMZA/Trent Academics/Data Analytics with R/Term Project/ExchangeRate')
runApp('C:/HAMZA/Trent Academics/Data Analytics with R/Term Project/ExchangeRate')
install.packages("lubridate")
library(lubridate)
runApp('C:/HAMZA/Trent Academics/Data Analytics with R/Term Project/ExchangeRate')
source('C:/HAMZA/Trent Academics/Data Analytics with R/Term Project/ExchangeRate/app.R')
#reading data
exchange_rates <- read.csv("exchange_rate_dataset.csv",fileEncoding = "ISO-8859-1")
setwd("C:/HAMZA/Trent Academics/Data Analytics with R/Term Project/ExchangeRate")
setwd("C:/HAMZA/Trent Academics/Data Analytics with R/Term Project/ExchangeRate")
source('app.R')
source('app.R')
source('app.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("rugarch")
library(rugarch)
runApp()
runApp()
